exit
@spell.errors
@spell.error
@spell.save
exit
test.length
test = match_power_types(regex)
match_power_types(regex)
regex
exit
regex.split(",")
regex
exit
regex
exit
regex.split(",")
match_power_types(regex)
regex
exit
regex.join(",")
regex
regex.gsub!(/[\"\\\[\]]/, "")
regex
regex.join(",")
regex.gsub(/[\"\\\[\]]/, "")
regex = @spell.power_type
regex.gsub(/[\w\s\,]/, " ")
regex = @spell.power_type
@spell
params
exit
Spell:0x007faf2e4a5878
params
exit
params
regex
exit
regex.length
regex
exit
regex
exit
regex
regex = regex.gsub(/\s\w\,/)
regex.sub(/\s\w\,/)
regex.sub!(/\s\w\,/)
regex
regex.gsub!(/\s\w\,/)
regex
regex.gsub(/\s\w\,/)
regex = self.power_type
self.power_type.join(",")
self.power_type.join(","J)J
self.power_type.length
self.power_type
self
match_power_types
params
exit
@matched_types
power_types.each do |p| @matched_types << p if params.match(p) end
power_types.each do |p|
power_types
@matched_types = []
params
exit
@types.join(",")
params.join(" ")
@types = params["spell"]["power_type"]
params["spell"]["power_type"]
"
params["spell"]["power_type]
params["spell"]
params[spell: :power_type]
params[spell[:power_type]]
params[:spell[:power_type]]
params[:cat_id]
params[:power_level]
params
params.power_type
params[power_type:]
params[:power_type[]]
params[power_type[]]
params[power_type: []]
params[:power_type]
params
exit
@spell.errors
@spell.save
@spell.errors
exit
@spell.errors
y
@spell.errors.all
@spell.save
@spell
exit
Cat.find_by(id: params[:id])
params
@cat
exit
@cat
exit
cat_object
exit
@cat.enrolled
@cat.enrolled = true
@cat.enrolled
@cat
cat
exit
@cat.name
@cat
exit
School.enroll_cat(@cat)
School.enroll_cat
@cat.enrolled
enroll_cat(@cat)
enroll_cat
@cat
exit
@spell.errors
@spell.error
@spell.save.errors
spell_params
@spell
params
exit
@spell.save
@spell
exit
@spell
exit
@spell
exit
@spell = Spell.find_by(id: params[:id])
params
exit
@power_types = power_types
power_types
@spell
exit
power_types.include?(self.power_type)
power_types.collect(self.power_type)
power_types.catch(self.power_type)
power_types.match(self.power_type)
power_types.each do |p| p == self.power_type end
unless power_types.each do |p| p == self.power_type end end
power_types
unless power_types.each do |p| p == self.power_type end
power_types.each do |p|
self.power_type.match(power_types)
self.power_type
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
Spell.by_cat(params[:cat_id])
Spell.by_cat(params[:cat_id]
params[:cat_id].blank?
params[:cat]
params[:cat].blank?
params[:cat_id]
params[:cat]
@cats
params
app.current_path
include Rails.application.routes.url_helpers
Rails.application.routes.url_helpers.path
!Rails.application.routes.url_helpers.spell_path(params[:id])
params[:id]
:id
!Rails.application.routes.url_helpers.spell_path(:id)
Rails.application.routes.url_helpers.spell_path(:id)
Rails.application.routes.url_helpers.spell_path(2)
Rails.application.routes.url_helpers.spell_path
Rails.application.routes.url_helpers
Spell.find_by(id: params[:id])
Cat.find_by(id: params[:id])
params[:id]
params
@cat
exit
Cat.find_by(id: @spell.cat_id)
@spell
params[@spell.cat_id]
Cat.all
@spell
Cat.find_by(id: params[@spell.cat_id])
@cat = Cat.find_by(id: params[@spell.cat_id])
exit
@spell
@spell.cat_id = params[:cat_id]
params
@spell
exit
@spell
params
exit
params[:user].blank?
current_user.id
params
exit
@user.errors
@user.valid?
@user.email.errors
@user.email
@user
params.permit(:name, :email, :password)
user_params
params[:name]
params[:user]
params(:user)
params
exit
params
user_params
exit
@user
exit
params[:name]
params
@user
exit
@cat = Cat.find_by(id: params[:id])
Cat.find_by(id: params[:id])
params
@school
exit
@user = User.find_by(id: current_user.id)
exit
current_user.id
@user = User.find_by(id: params[:id])
params
exit
@cat
exit
